}
(param <- seq(0.1,10, length.out = length(data_mle)))
(plot(param, myLogLik(data_mle, param), type = "l", col = "blue", lwd = 2))
# Ce graphique represente une fonction concave d?croissante
# repr?sentant une courbe de densit? de proba de loi normale
optim(par = 2, fn = myLogLik, data = data_mle, method="Brent",
lower=0, upper=1, control = list(fnscale= -1))
# je trouve commme param?tre estim? = 1 sachant que la moyenne
# etait de 2,35 il y'a bien une difference
# establishment of the function
PoissonLogLik <- function(data, proba){
result <- 0
for(i in 1:length(data)){
result <- result + (data[i]*log(proba)-proba-log(factorial(data[i])))
}
return(result)
}
# introduction of the data
data_mle<-data_mle$x
data_mle
mean(data_mle)
hist(data_mle)
# establishement of parametre and the plot
param <- seq(0.1,10, length.out = length(data_mle))
plot(param, PoissLogLik(data_mle, param), type = "l", col = "blue", lwd = 2)
# optimisation of the fonction
optim(par = 1, fn = PoissLogLik, data = data_mle, method="Brent",
lower=0, upper=1, control = list(fnscale= -1))
#??? exo 4
# exo 3
for (i in 1:100 )
if (i %% 3 == 0) {
print(paste(i,"fizz"))
} else if (i %% 5 == 0) {
print(paste(i,"buzz"))}
#??? exo 4
for (i in 1:100 ){
if ((i %% 3 == 0) & (i %% 5 == 0 ))
{
print(paste(i, "fizzbuzz"))}
else if (i %% 3 == 0)
{print(paste(i,"fizz"))
}
else if (i %% 5 == 0){print(paste(i,"buzz"))}
}
# exo 2
a <- c(9,4,12,5,0,7,2,6,8,9,2,9)
A <- matrix(a, nrow = 4, ncol = 3, byrow = TRUE)
b <- c(5,4,2,5,2,7,2,1,8,3,2,6)
B <- matrix(b, nrow = 3, ncol = 4, byrow = TRUE)
C <- matrix(rep(0,16), nrow = 4)
for(i in 1:nrow(A)){
for(j in 1:ncol(B)){
for(k in 1:nrow(B)){
C[i,j] <- C[i,j] + A[i,k]* B[k,j]
}
}
}
C
# EXO 1 vraisemblance
poiLogLik <- function(data, proba){
result <- 0
for(i in 1:length(data)){
result <- result - proba + data[i]*log(proba) - factorial(data[i])
}
return(result)
}
optim(par = 3, fn = poiLogLik, data = data_mle, method="Brent",
lower=0, upper=8, control = list(fnscale= -1))
data_mle <- data_mle$x
param <- seq(0.1,10, length.out = length(data_mle))
plot(param, poiLogLik(data_mle, param), type = "l", col = "red", lwd = 5)
hist(data_mle)
mean(data_mle)
# la moyenne est la meme que quant on fait l'optimisation
data_mle <- data_mle$x
myLogLik <- function(lambda, y){
result <- 0
for(i in 1:length(lambda)){
result <- result + (y[i] * log(lambda) + (1 - y[i]) * log(1 - lambda))
}
return(-result)
}
optim(par = 0.5, fn = myLogLik, y = data_mle, method="Brent",
lower=0, upper=1)
data_mle # on peux voire toutes les valeurs importees
mean(data_mle)#2,3515 est la moyenne (function calculates the arithmetic mean)
hist(data_mle)# c'est le graphique likelihood
param <- seq(0.1,10, length.out = length(data_mle))
plot(param, myLogLik(data_mle, param), type = "l", col = "blue", lwd = 2)
# je ne comprend pas l'origine de l'erreur dans plot
#EXERICE 1
# For loops
a <- c(1,6,7,8,8,9,2)
a # we got [1] 1 6 7 8 8 9 2
result = 0
# the basic numeber is zero
for (i in a){
result <- result + i
}
# It is  possible to do calculations using for loops. Let's compute the sum of the vector
print(result)
[1] 41
# It is the result of the sum of the vector,we got the result is equal to 41
# While loops
a <- c(1,6,7,8,8,9,2)
a # we got [1] 1 6 7 8 8 9 2
result = 0
# the basic numeber is zero
j = 1
while (j <=length(a)){
result <- result + a[j]
j <- j + 1
}
# It is  possible to do calculations using for while loops. Let's compute the sum of the vector
print(result)
[1] 41
# we got the result is equal to 41, the expected result
#EXERICE 2
A <- matrix(c(9,5,2,9,4,0,6,2,12,7,8,9),nrow=4)
#create a matrix A
B <-matrix(c(5,2,8,4,7,3,2,2,2,5,1,6),nrow=3)
#create a matrix B
C <-matrix(rep(0,16),nrow=4)
#create a matrix C of dimension (4,4)
for(i in 1:nrow(A))
for(j in 1:ncol(B))
for(k in 1:nrow(B))
{C[i,j] <-C[i,j]+A[i,k]*B[k,j]}
#EXERICE 3
for (i in 1:100)
#i in the integers from 1 to 100
{if (i%%3==0) print("Fizz")
#if i is only divisible by 3
else if(i%%5==0) print("buzz")
#if i is only divisible by 5
else print(i)}
#EXERICE 4
for (i in 1:100)
#i in the integers from 1 to 100
{if (i%%3==0)
if (i%%5==0) print("fizzbuzz")
#if i is divisible by 3 and 5 at the same time
else print("fizz")
#if i is only divisible by 3
else if(i%%5==0) print("buzz")
#if i is only divisible by 5
else print(i)}
#exercicie2
a<-matrix(c(9,4,12,5,0,7,2,6,8,9,2,0), nrow= 4, byrow = TRUE)
b<-matrix(c(5,4,2,5,7,2,1,8,3,2,6),nrow = 3,byrow = TRUE)
c<-matrix(rep(0,16),nrow = 4)
resultat<-0
for(i in 1:nrow(a)) {
for(j in 1:nrow(b)) {
for(k in 1:nrow(b)) {
c[i,j]<- c[i,j] + a[i,k] * b[k,j]
}}}
#exercice3
for (i in 1:100)
if(i %% 5 == 0){
print("Fizz")
}else if (i %% 5 == 0) {
print("buzz")}
#exercice4
for(i in 1 :100)
if(i %% 15 ==0){
print("FizzBuzz")
}else if (i %% 3 == 0){
print("Fizz")
}else if (i%% 5 =0){
print("BUZZ")
}
#Exercice 1
data_mle<- data_mle$x
data_mle
#Apprement on a des valeurs entre 0 et 8
mean (data_mle)
#La moyenne des données est de 2,3515
hist(data_mle)
#on remarque l'on a un histogramme qui ressemble a celui d'une distribution de Poisson
PoissonLogLik <-function(data,lambda) {
resultat <- -length(data) * lamda
for (i in 1:length(data)){
reslutat <- reslutat + (deta[i] *(log(lambda)))+log(facrorial(data[i]))
}
return(resultat)
}
optim(par = 2, fn = PoissonLogLik,data = data_mle,
method = "Brent",
lower=0, upper = 8 ,control = list(fnscale=-1))
param <- seq(0.1,10,length.out = length(data_mle))
plot(param,PossionLogLik(data_mle,param), type = "1", col="yellow" , lwd= 2)
#On voit une fonction de type clothe ,avec un maximum atteint pour
#lambda =2,3515, concerne la moyenne de l'echantillon
#Ce graphique pratique nous permet à voir qu'il existe un maximum et qu'il se situe aux environ de 2
install.packages("crrp")
#simulate competing risks data
set.seed(10)
ftime <- rexp(200)
fstatus <- sample(0:2,200,replace=TRUE)
cov <- matrix(runif(1000),nrow=200)
dimnames(cov)[[2]] <- c('x1','x2','x3','x4','x5')
#simulate competing risks data
set.seed(10)
ftime <- rexp(200)
fstatus <- sample(0:2,200,replace=TRUE)
cov <- matrix(runif(1000),nrow=200)
dimnames(cov)[[2]] <- c('x1','x2','x3','x4','x5')
head(cov)
head(ftime)
head(fstatus)
#fit LASSO
fit <- crrp(ftime, fstatus, cov, penalty="LASSO")
#use BIC to select tuning parameters
beta <- fit$beta[, which.min(fit$BIC)]
beta.se <- fit$SE[, which.min(fit$BIC)]
library("crrp")
#fit LASSO
fit <- crrp(ftime, fstatus, cov, penalty="LASSO")
#use BIC to select tuning parameters
beta <- fit$beta[, which.min(fit$BIC)]
beta.se <- fit$SE[, which.min(fit$BIC)]
fit
fit$beta
fit$beta
lambda
fit$lambda
beta
beta.se <- fit$SE[, which.min(fit$BIC)]
beta.se
beta/beta.se
install.packages("ncvreg")
table(fstatus)
install.packages(c("DBI", "evaluate"))
library(crrp)
citation("crrp")
install.packages(c("crayon", "dplyr", "jsonlite", "lazyeval", "mime", "quantreg", "rmarkdown", "stringi"))
install.packages(c("stringr", "tidyr", "lambda.tools", "haven", "readr"))
data(swiss)
head(swiss)
convertToKmh <- function(dataset, var){
dataset$var <- dataset$speed * 1.609344
return(dataset)
}
convertToKmh(cars, "speed")
convertToKmh(cars, "speed")
data(cars)
head(cars)
install.packages("lazyeval")
View(cars)
cars %>% filter(dist==2)
library(dplyr)
cars %>% filter(dist==2)
cars %>% filter(dist==4)
cars %>% filter(dist==10)
library(lazyeval)
interp(~x+y, x = 2)
simpleFunction <- function(dataset, col_name){
require("dplyr")
dataset %>%
group_by(col_name) %>%
summarise(mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, "dist")
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(col_name == value) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(lazyeval(~col_name == x, x = as.name(value))) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
library(lazyeval)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(interp(~col_name == x, x = as.name(value))) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(interp(~col_name == x, x = value)) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
cars %>% filter(dist==10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
interp(~filter_(col_name == x, x = value)) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
cars %>% filter(dist==10)
simpleFunction(cars, dist, 10)
inter(~x+y, y=2)
interp(~x+y, y=2)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(interp(~y == x, y = as.name(col_name), x = value)) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
interp(~x==y, y=2)
interp(~x==y, x=1, y=2)
force(interp(~x==y, x=1, y=2))
eval(interp(~x==y, x=1, y=2))
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(interp(~y == x, .values=list(y = as.name(col_name), x = value))) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
dataset %>%
filter_(interp(~y == x, .values=list(y = as.name(col_name), x = value))) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
dataset %>%
filter_(interp(~y == x, .values=list(y = as.name(col_name), x = value))) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
interp(~y == x, .values=list(y = as.name(col_name), x = value))
interp(~y == x, .values=list(y = ass, x = value))
interp(~y == x, .values=list(y = 1, x = 2))
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
dataset %>%
filter_(y == x) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(col_name == value) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
value <- 10
cars %>% filter(dist==value)
cars %>% filter(dist==eval(value))
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(col_name == eval(value)) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction(cars, dist, 10)
y
x
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
dataset %>%
filter_(interp(~dist == x, x = value)) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(dist == value) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
y <- as.name(col_name)
dataset %>%
filter_(interp(~y == x, .values=list(y = y, x = value))) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
filter_criteria <- interp(~y == x, .values=list(y = col_name, x = value))
dataset %>%
filter_(filter_criteria) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, dist, 10)
simpleFunction(cars, ~dist, 10)
simpleFunction(cars, "dist", 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
filter_criteria <- interp(~y == x, .values=list(y = as.name(col_name), x = value))
dataset %>%
filter_(filter_criteria) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, "dist", 10)
simpleFunction(cars, dist, 10)
simpleFunction(cars, ~dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
filter_criteria <- interp(~y == x, .values=list(y = quote(col_name), x = value))
dataset %>%
filter_(filter_criteria) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, ~dist, 10)
simpleFunction(cars, dist, 10)
simpleFunction(cars, ~dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
filter_criteria <- interp(~y == x, .values=list(y = as.name(col_name), x = value))
dataset %>%
filter_(filter_criteria) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, ~dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
filter_criteria <- interp(~y == x, .values=list(y = col_name, x = value))
dataset %>%
filter_(filter_criteria) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, ~dist, 10)
simpleFunction(cars, "dist", 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
filter_criteria <- interp(~y == x, .values=list(y = as.name(col_name), x = value))
dataset %>%
filter_(filter_criteria) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, "dist", 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
dataset %>%
filter_(col_name == value) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, "dist", 10)
simpleFunction(cars, dist, 10)
simpleFunction(cars, ~dist, 10)
simpleFunction <- function(dataset, col_name, value){
require("dplyr")
require("lazyeval")
filter_criteria <- interp(~y == x, .values=list(y = as.name(col_name), x = value))
dataset %>%
filter_(filter_criteria) %>%
summarise(mean_speed = mean(speed)) -> dataset
return(dataset)
}
simpleFunction(cars, "dist", 10)
simpleFunction(cars, dist, 10)
simpleFunction(cars, ~dist, 10)
data(cars)
cars %>% filter(speed==10)
library(dplyr)
cars %>% filter(speed==10)
cars %>% filter(speed=="")
cars %>% filter(speed==.)
cars %>% filter(speed==TRUE)
cars %>% filter(speed==all(speed))
cars %>% filter(speed==speed)
setwd("ownCloud/Documents/Work/github_page/b-rodrigues.github.com")
getwd
getwd()
library(blogdown)
new_post("content/how_to_use_jailbreakr.Rmd")
